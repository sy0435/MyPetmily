<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="board.mapper">

<delete id="comment_delete">
	delete from board_comment where id=#{id}
</delete>

<update id="comment_update">
	update board_comment set content = #{content}
	where id=#{id}
</update>

<select id="comment_list" resultType="board.BoardCommentVO">
 select c.*, (select name from member m where m.id=writer) name,
 to_char(writedate, 'yyyy-mm-dd hh24:mi:ss') writedate from board_comment c 
 where bid=#{bid} order by id desc
</select> 


<insert id="comment_regist">
insert into board_comment (bid, writer, content)
values(#{bid}, #{writer}, #{content})
</insert>

<delete id="delete">
delete from board where id=#{id}
</delete>

<update id="update">
	update board set title=#{title}, content=#{content}, filename=#{filename,jdbcType=VARCHAR}
						,filepath=#{filepath, jdbcType=VARCHAR}
	where id = #{id}
</update>

<select id="detail" resultType="board.BoardVO">
	select b.*, (select name from member where member.id=writer) name
	from board b where id=#{id}
</select>

<insert id="insert">
	insert into board(title, content, writer, filename, filepath)
	values (#{title}, #{content},#{writer},#{filename, jdbcType=VARCHAR}, #{filepath,jdbcType=VARCHAR})
</insert>

<sql id="search_where">
<if test="search=='title' or search=='content'">
	where ${search} like '%' || #{keyword} || '%'
</if>
<if test="search=='writer'">
	where writer in (select id from member where name like '%' || #{keyword} || '%')
</if>

<if test="search=='all'">
	where title like '%' || #{keyword} || '%'
	or content like '%' || #{keyword} || '%'
	or writer in
	(select id from member where name like '%' || #{keyword} || '%')
</if>
</sql>

<!-- 방명록 목록 건수 조회  -->
<select id="total" resultType="integer">
	select count(*) from board <include refid="search_where" />
</select>

<!-- 방명록 각 페이지에 출력한 목록 조회 -->
<select id="list" resultType="board.BoardVO">
	select n.*, (select name from member m where m.id=writer) name from
	(select n.*, rownum no from 
	(select * from board <include refid="search_where" /> order by id)  n
	order by no desc) n
	where no between #{beginList} and #{endList}
</select>

</mapper>